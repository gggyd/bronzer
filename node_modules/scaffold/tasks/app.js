var fs = require('fs');
var path = require('path');
var rename = require('gulp-rename');
var glob = require('glob');
var frep = require('gulp-frep');
var concat = require('gulp-concat');
var _ = require('lodash');

var root = process.cwd();
var config = require(path.join(root,'scaffold.config.js'));

module.exports = function(gulp){
	var watch = config.staticScripts.concat(config.appStyles).concat(config.appScripts);
	gulp.watch(watch,function(handle){
		console.log(handle);
		gulp.run('build-app');
	});
	
	gulp.task('build-app',['build-index']);
	gulp.task('build-index',function(){
		var originIndex = "index.htm";
		var tempIndex = "tempIndex.htm";
		var targetIndex = "index.html";
		var tempIndexPath = path.join(root,tempIndex);
		var targetIndexPath = path.join(root,targetIndex);
		
		var stream = gulp.src(originIndex)
			.pipe(injectAppStyles(config.appStyles))
			.pipe(injectStaticScripts(config.staticScripts))
			.pipe(injectAppComponents(config.appComponents))
			.pipe(injectAppScripts(config.appScripts))
			.pipe(rename(tempIndex))
			.pipe(gulp.dest('./'))
			
		return stream.on('end',function(){
			var file = fs.readFileSync(tempIndexPath);
			try{
				fs.unlinkSync(targetIndexPath)
			}
			catch(e){}
			
			fs.rename(tempIndexPath,targetIndexPath);
		});
	});
};

function injectAppStyles(appPaths){
	var patterns = [];
	var appStyles = [];
	
	appPaths.forEach(function(appPath){
		appStyles = appStyles.concat(glob.sync(appPath));
	});
	
	appStyles = _.uniq(appStyles);
	
	appStyles = appStyles.map(function(src){
		var stat = fs.statSync(src);
		var ver = stat.mtime / 1000;
		return src + '?v=' + ver;
	});
		
	patterns.push({
		pattern:/<!--\[APP\sSTYLES\]-->[.\w\s\n<>=/-]*<!--\[APP\sSTYLES\sEND\]-->/,
		replacement:'<!--[APP STYLES]-->\n' +
					appStyles.map(function(s){
						return '        <link href="' + s + '" rel="stylesheet"></script>';
					}).join('\n') +
					'\n        <!--[APP STYLES END]-->'
	});
	
	return frep(patterns);
};

function injectStaticScripts(appPaths){
	var patterns = [];
	var staticScripts = [];
	
	appPaths.forEach(function(appPath){
		staticScripts = staticScripts.concat(glob.sync(appPath));
	});
	
	staticScripts = _.uniq(staticScripts);
	
	staticScripts = staticScripts.map(function(src){
		var stat = fs.statSync(src);
		var ver = stat.mtime / 1000;
		return src + '?ver=' + ver;
	});
	
	patterns.push({
		pattern:/<!--\[STATIC\sSCRIPTS\]-->[.\w\s\n<>=/-]*<!--\[STATIC\sSCRIPTS\sEND\]-->/,
		replacement:'<!--[STATIC SCRIPTS]-->\n' +
					staticScripts.map(function(s){
						return '        <script src="' + s + '"></script>';
					}).join('\n') +
					'\n        <!--[STATIC SCRIPTS END]-->'
	});
	
	return frep(patterns);
};

function injectAppComponents(appPaths){
	var patterns = [];
	var scripts = [];
	
	appPaths.forEach(function(appPath){
		scripts = scripts.concat(glob.sync(appPath));
	});
	
	scripts = _.uniq(scripts);	
		patterns.push({
		pattern:/<!--\[APP\sCOMPONENTS\]-->[.\w\s\n<>=/-]*<!--\[APP\sCOMPONENTS\sEND\]-->/,
		replacement:'<!--[APP COMPONENTS]-->\n' +
					scripts.map(function(s){
						return '        <script src="' + s + '"></script>';
					}).join('\n') +
					'\n        <!--[APP COMPONENTS END]-->'
	});
	
	return frep(patterns);
};

function injectAppScripts(appPaths){
	var patterns = [];
	var scripts = [];
	
	appPaths.forEach(function(appPath){
		scripts = scripts.concat(glob.sync(appPath));
	});
	
	scripts = scripts.map(function(src){
		var stat = fs.statSync(src);
		var ver = stat.mtime / 1000;
		return src + '?ver=' + ver;
	});
	
	scripts = _.uniq(scripts);	
		patterns.push({
		pattern:/<!--\[APP\sSCRIPTS\]-->[.\w\s\n<>=/-]*<!--\[APP\sSCRIPTS\sEND\]-->/,
		replacement:'<!--[APP SCRIPTS]-->\n' +
					scripts.map(function(s){
						return '        <script src="' + s + '"></script>';
					}).join('\n') +
					'\n        <!--[APP SCRIPTS END]-->'
	});
	
	return frep(patterns);
};