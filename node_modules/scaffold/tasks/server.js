var express = require('express');
var path = require('path');
var app = express();
app.use('/',express.static('./'));
var Mock = require('mockjs');
var httpProxy = require('http-proxy');
var minimist = require('minimist');
var requireDir = require('require-dir');

var _ = require('lodash');
var root = process.cwd();
var config = require(path.join(root,'scaffold.config.js'));
var routerPaths = requireDir(path.join(root,'mocker'));

function handlerRouter(routerStr){
	var route = {
		url:null,
		method:null
	};	
	
	var router = routerStr.split(/\s+/);
	if (router.length >=2){
		route.url = router[1];
		route.method = router[0].toLowerCase();
	}
	else{
		route.url = router[0];
		route.method = 'all';
	}
	
	return route;
};

var knownOptions = {
	string:'proxy'
}

var options = minimist(process.argv.slice(3),knownOptions);

function startServer(){
	if (typeof options.proxy !== 'string'){
		_.forIn(routerPaths,function(value,key){
			_.forIn(value,function(handler,router){
				var route = handlerRouter(router);
				handler = Mock.mock(handler);
				app.route(route.url)[route.method](function(req,res){
					res.json(handler);
				});
				
			})
		});
	}
		
	if (typeof options.proxy=== 'string'){
		console.log('Proxy Active');
		var proxy = httpProxy.createProxyServer({});
		
		proxy.on('proxyReq',function(proxyReq,req){
			console.log(' ==> REQUST ' + options.proxy + req.url);
		});
		
		proxy.on('proxyRes',function(proxyRes,req){
			console.log(' <== RESPONSE ' + options.proxy + req.url);
		});
		
		proxy.on('error',function(err, req, res){
			console.log(err);
			res.writeHead(500,{
				'content-type':'text/plain'
			});
			res.end(err.code);
		})
		
		app.route('*').all(function(req,res){
			var target = getResponseUrl(req.url,options.proxy);
			console.log(target);
			proxy.web(req,res,{
				target: target
			});
		});
	};	
	
	console.log('http server running at ' + config.server.port);
	app.listen(config.server.port);
}

function getResponseUrl(url,proxys){
	var args = proxys.split('=');
	return args[1];
};

module.exports = function(gulp){
	gulp.task('server',startServer);
}